BootStrap: docker
# https://hub.docker.com/r/rockylinux/rockylinux/tags
From: rockylinux/rockylinux:9

# Tested on:
# - [x] Manjaro
#   - [ ] Functional
# - [x] Ubuntu 22.04
#   - [x] Functional
# - [x] Rocky9
#   - [x] Functional

%post

    dnf upgrade -y
    dnf install -y which
    dnf install -y epel-release
    dnf config-manager --set-enabled crb devel
    dnf install -y \
        alsa-lib-devel \
        autoconf \
        automake \
        avahi-compat-libdns_sd-devel \
        bison \
        bzip2-devel \
        cmake-gui \
        curl-devel \
        diffutils \
        flex \
        git \
        gcc \
        gcc-c++ \
        libXcomposite \
        libXi-devel \
        libaio-devel \
        libffi-devel \
        nasm \
        ncurses-devel \
        nss \
        libtool \
        libxkbcommon \
        libXcomposite \
        libXdamage \
        libXrandr \
        libXtst \
        libXcursor \
        mesa-libGLU \
        mesa-libGLU-devel \
        mesa-libOSMesa \
        mesa-libOSMesa-devel \
        meson \
        ninja-build \
        openssl-devel \
        patch \
        perl-FindBin \
        pulseaudio-libs \
        pulseaudio-libs-glib2 \
        ocl-icd \
        ocl-icd-devel \
        opencl-headers \
        qt5-qtbase-devel \
        readline-devel \
        sqlite-devel \
        tcl-devel \
        tcsh \
        tk-devel \
        wget \
        yasm \
        zip \
        zlib-devel \
        systemd-devel
    dnf config-manager --set-disabled devel
    dnf clean all
    rm -rf /var/cache/yum

    # BUILD
    mkdir -p /build

    ## CMAKE
    mkdir -p /build/cmake

    pushd /build/cmake
    curl --location https://github.com/Kitware/CMake/releases/download/v{{ CMAKE_VERSION }}/cmake-{{ CMAKE_VERSION }}-linux-x86_64.sh \
        --output cmake.sh
    sh cmake.sh --prefix=/usr/local/ --skip-license
    rm -rf cmake.sh
    popd

    ## QT
    export QT_QPA_PLATFORM="offscreen"
    mkdir -p /build/Qt

    pushd /build/Qt
    # Download ninja from GitHub to get a more recent version.
    wget https://github.com/ninja-build/ninja/releases/download/v{{ NINJA_VERSION }}/ninja-linux.zip
    unzip ninja-linux.zip -d ./ninja
    echo 'export PATH=${HOME}/ninja:${PATH}' >> ${HOME}/.bash_profile
    export PATH="${HOME}/ninja:${PATH}"

    # Using pyenv to make sure that python and python3 command points to the same version.
    # Install pyenv
    git clone http://github.com/pyenv/pyenv.git ${HOME}/.pyenv
    export PYENV_ROOT="${HOME}/.pyenv"
    export PATH="${PYENV_ROOT}/shims:${PYENV_ROOT}/bin:${PATH}"
    echo 'export PYENV_ROOT="${HOME}/.pyenv"' >> ~/.bashrc
    echo 'export PATH="$PYENV_ROOT/shims:$PYENV_ROOT/bin:$PATH"' >> ~/.bashrc
    echo 'eval "$(pyenv init -)"' >> ~/.bashrc

    # Install specific version of Python
    pyenv install {{ PY_ENV_PYHON }}

    # Set as the global version
    pyenv global {{ PY_ENV_PYHON }}

    pip install --upgrade pip
    python -m pip install aqtinstall

    python -m aqt --help
    # https://aqtinstall.readthedocs.io/en/stable/configuration.html#configuration
    # WARNING : Caught ChecksumDownloadFailure, terminating installer workers
    # ERROR   : Failed to download checksum for the file '5.15.2-0-202011130601qtdeclarative-Linux-RHEL_7_6-GCC-Linux-RHEL_7_6-X86_64-debug-symbols.7z' from mirrors '['https://download.qt.io']
    # ==============================Suggested follow-up:==============================
    # * Check your internet connection
    # * Consider modifying `requests.max_retries_to_retrieve_hash` in settings.ini
    # * Consider modifying `mirrors.trusted_mirrors` in settings.ini (see https://aqtinstall.readthedocs.io/en/stable/configuration.html#configuration)

    python -m aqt install-qt linux desktop {{ QT_HOME_VERSION }} gcc_64 -O {{ QT_ROOT }} \
        -m debug_info qtcharts qtdatavis3d qtlottie qtnetworkauth qtpurchasing qtquick3d qtquicktimeline qtscript qtvirtualkeyboard qtwaylandcompositor qtwebengine qtwebglplugin \
        --archives icu qt3d qtbase qtconnectivity qtdeclarative qtgamepad qtgraphicaleffects qtimageformats qtlocation qtmultimedia qtquickcontrols qtquickcontrols2 qtremoteobjects qtscxml qtsensors qtserialbus qtserialport qtspeech qtsvg qttools qttranslations qtwayland qtwebchannel qtwebsockets qtwebview qtx11extras qtxmlpatterns

    export QT_HOME="{{ QT_ROOT }}/{{ QT_HOME_VERSION }}/gcc_64"
    popd

    ## OPENRV
    mkdir -p /build/OpenRV

    pushd /build/OpenRV
    git clone \
        --recursive \
        https://github.com/AcademySoftwareFoundation/OpenRV.git \
        .
    # git clone --recursive --depth 1 https://github.com/AcademySoftwareFoundation/OpenRV.git

    # export QT_HOME="{{ QT_ROOT }}/{{ QT_HOME_VERSION }}/gcc_64"

    export RV_INST="{{ RV_INST }}"

    source ./rvcmds.sh
    time rvsetup
    rvcfg \
        -DRV_FFMPEG_NON_FREE_DECODERS_TO_ENABLE=\"{{ FFMPEG_NON_FREE_DECODERS_TO_ENABLE }}\" \
        -DRV_FFMPEG_NON_FREE_ENCODERS_TO_ENABLE=\"{{ FFMPEG_NON_FREE_ENCODERS_TO_ENABLE }}\"
    time rvbuildt dependencies
    time rvbuildt main_executable
    rvinst
    popd

    # rm -rf /build/OpenRV
    # rm -rf {{ QT_ROOT }}

    # CLEANUP

    # build
    # $ apptainer exec --nv --bind /run/user/$UID OpenRV.sif du -hs /build
    # 15G     /build
    # rm -rf /build

    # Todo
    #  - [ ] Remove /opt/Qt?
    #  - [ ] Remove cmake?

    dnf autoremove -y
    dnf clean all

    cp /lib64/libc.so.6 {{ RV_INST }}/lib
    cp /lib64/libcrypt.so.2 {{ RV_INST }}/lib

%labels
    Author "Jean First"
    Contributors "Jean First, Michael Mussato"
    Version "v0.0.2"

%help
    # Build
    # - create .env file and define QT_EMAIL and QT_PASSWORD - the credentials of your Qt Account
    export APPTAINERFILE="OpenRV.def" && /usr/bin/time -f 'Commandline Args: %C\nElapsed Time: %E\nPeak Memory: %M\nExit Code: %x' apptainer build --build-arg-file .env --warn-unused-build-args ./apptainer/sif/OpenRV.sif ./apptainer/${APPTAINERFILE} > >(tee -a ./apptainer/${APPTAINERFILE}.STDOUT.log) 2> >(tee -a ./apptainer/${APPTAINERFILE}.STDERR.log >&2) && unset APPTAINERFILE
    # Run
    export APPTAINERFILE="OpenRV.def" && apptainer exec --nv --bind /run/user/$UID,/Volumes,/run/media/$USER ./apptainer/sif/OpenRV.sif /opt/rv/bin/rv && unset APPTAINERFILE
