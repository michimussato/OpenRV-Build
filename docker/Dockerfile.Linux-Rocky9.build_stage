FROM openstudiolandscapes/openrv_linux_rocky9_build_base:latest AS openrv_linux_rocky9_build_stage
# Build:
# docker build --file ./Dockerfile.Linux-Rocky9.build_stage --progress plain --tag openstudiolandscapes/openrv_linux_rocky9_build_stage:latest .
#
# Run (attached):
# Ref: https://stackoverflow.com/a/55734437/2207196
# docker run --hostname openrv_linux_rocky9_build_stage --rm --name openrv_linux_rocky9_build_stage openstudiolandscapes/openrv_linux_rocky9_build_stage:latest /bin/bash -c "trap : TERM INT; sleep infinity & wait"
#
# Exec:
# docker container exec --interactive --tty openrv_linux_rocky9_build_stage /bin/bash

# Process tested with user rv: [x]

LABEL maintainer="Michael Mussato"

USER rv

RUN git clone \
    --recursive \
    https://github.com/AcademySoftwareFoundation/OpenRV.git

WORKDIR $HOME/OpenRV

# ENV RV_INST="/opt/OpenRV"
ENV QT_HOME="$HOME/Qt/5.15.2/gcc_64"

RUN ls -al

RUN . ./rvcmds.sh && rvsetup
RUN . ./rvcmds.sh && rvcfg -DRV_FFMPEG_NON_FREE_DECODERS_TO_ENABLE="aac;hevc" -DRV_FFMPEG_NON_FREE_ENCODERS_TO_ENABLE="aac"
RUN . ./rvcmds.sh \
    && rvbuildt dependencies
RUN . rvcmds.sh \
    && rvbuildt main_executable


# Determine build platform, version, and architecture for creation of rv tarball name
RUN echo "Determining build platform..." && \
    if [ -f /etc/os-release ]; then \
        . /etc/os-release; \
        if [ "${NAME}" = "Rocky Linux" ]; then \
            BUILD_PLATFORM="Rocky${VERSION_ID%.*}"; \
        else \
            BUILD_PLATFORM=$(echo ${NAME}${VERSION_ID} | tr ' ' '_'); \
        fi \
    else \
        BUILD_PLATFORM=$(uname -s); \
    fi && \
    OPENRV_BUILD_DIR="${HOME}/OpenRV" && \
    ENVIRONMENT="${OPENRV_BUILD_DIR}/environment" && \
    VERSION=$(${OPENRV_BUILD_DIR}/_build/stage/app/bin/rv -version) && \
    ARCHITECTURE=$(uname -m) && \
    echo "BUILD_PLATFORM=${BUILD_PLATFORM}" > ${ENVIRONMENT} && \
    echo "VERSION=${VERSION}" >> ${ENVIRONMENT} && \
    echo "ARCHITECTURE=${ARCHITECTURE}" >> ${ENVIRONMENT} && \
    BUILD_NAME=OpenRV-${BUILD_PLATFORM}-${ARCHITECTURE}-${VERSION} && \
    echo "BUILD_NAME=${BUILD_NAME}" >> ${ENVIRONMENT} && \
    echo "${BUILD_NAME}" >> ${OPENRV_BUILD_DIR}/build_name.txt

# Source the environment variables file
RUN . ${ENVIRONMENT} && echo "Build Name: ${BUILD_NAME}"
# rvinst
# alias rvinst="rvenv && cmake --install ${RV_BUILD} --prefix ${RV_INST} --config Release"
RUN . ${ENVIRONMENT} && . rvcmds.sh && rvinst
RUN . ${ENVIRONMENT} && cp /lib64/libcrypt.so.2 $RV_INST/lib
# RUN . ${ENVIRONMENT} && tar -czvf ${BUILD_NAME}.tar.gz -C ${RV_INST} ${BUILD_NAME}
RUN . ${ENVIRONMENT} && tar -czvf ${BUILD_NAME}.tar.gz -C ${RV_INST} .
RUN . ${ENVIRONMENT} && echo -e "\n\e[1;32mRun the following lines to copy your OpenRV build into your ~/Downloads folder:\e[0m" && \
    echo -e "\e[1;36msudo docker run -d --name <your_container_name> <repo>/<container>:<tag>\e[0m" && \
    echo -e "\e[1;36msudo docker cp <your_container_name>:${RV_INST}/${BUILD_NAME}.tar.gz ~/Downloads/\e[0m\n\n"


CMD ["/bin/bash"]
