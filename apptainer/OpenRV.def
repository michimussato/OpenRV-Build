BootStrap: docker
# https://hub.docker.com/r/rockylinux/rockylinux/tags
From: rockylinux:9
# From: rockylinux:9.6

%post

    time dnf install -y git which
    time dnf install -y epel-release
    time dnf config-manager --set-enabled crb devel
    time dnf install -y \
        alsa-lib-devel \
        autoconf \
        automake \
        avahi-compat-libdns_sd-devel \
        bison \
        bzip2-devel \
        cmake-gui \
        curl-devel \
        flex \
        gcc \
        gcc-c++ \
        libXcomposite \
        libXi-devel \
        libaio-devel \
        libffi-devel \
        nasm \
        ncurses-devel \
        nss \
        libtool \
        libxkbcommon \
        libXcomposite \
        libXdamage \
        libXrandr \
        libXtst \
        libXcursor \
        mesa-libOSMesa \
        mesa-libOSMesa-devel \
        meson \
        ninja-build \
        openssl-devel \
        patch \
        perl-FindBin \
        pulseaudio-libs \
        pulseaudio-libs-glib2 \
        ocl-icd \
        ocl-icd-devel \
        opencl-headers \
        python3 \
        python3-devel \
        qt5-qtbase-devel \
        readline-devel \
        sqlite-devel \
        systemd-devel \
        tcl-devel \
        tcsh \
        tk-devel \
        yasm \
        zip \
        zlib-devel
    time dnf config-manager --set-disabled devel
    time dnf install -y \
        mesa-libGLU \
        mesa-libGLU-devel
    # time dnf clean packages
    # time dnf autoremove

    # Note: /usr/bin/python needs to exist for OpenRV to build correctly.
    # ln -sf /usr/bin/python3.9 /usr/bin/python
    # python -m pip install --root-user-action=ignore --upgrade pip setuptools setuptools_scm wheel
    # time python3 -m pip install --upgrade pip setuptools setuptools_scm wheel

    # BUILD
    mkdir -p /build

    ## CMAKE
    mkdir -p /build/cmake

    pushd /build/cmake
    time curl --location \
        --remote-name \
        https://github.com/Kitware/CMake/releases/download/v{{ CMAKE_VERSION }}/cmake-{{ CMAKE_VERSION }}.tar.gz
    time tar -zxvf cmake-{{ CMAKE_VERSION }}.tar.gz
    cd cmake-{{ CMAKE_VERSION }}
    time ./bootstrap --parallel=$(nproc)
    time make -j $(nproc)
    time make install

    # [ $(which cmake) == "/usr/local/bin/cmake" ] || echo "wrong cmake" && exit 1
    which cmake
    # [ $(cmake --version) == "cmake version {{ CMAKE_VERSION }}" ] || echo "wrong cmake version" && exit 1
    cmake --version
    popd

    # rm -rf /build/cmake

    ## QT
    mkdir -p /build/Qt

    pushd /build/Qt
    # QT Online Installer for Linux
    # https://doc.qt.io/qt-6/get-and-install-qt-cli.html#downloading-qt-online-installer-with-command-line-interface
    # https://doc.qt.io/archives/qt-5.15/get-and-install-qt-cli.html#downloading-qt-online-installer-with-command-line-interface

    time curl --location \
        --remote-name \
        https://d13lb3tujbc8s0.cloudfront.net/onlineinstallers/qt-unified-linux-x64-{{ QT_INSTALLER_VERSION }}-online.run
    chmod a+x qt-unified-linux-x64-{{ QT_INSTALLER_VERSION }}-online.run
    # Not required:
    # - Logs
    # - Android
    # - iOS
    # - WebAssembly
    time ./qt-unified-linux-x64-{{ QT_INSTALLER_VERSION }}-online.run \
        --verbose \
        --email "{{ QT_EMAIL }}" \
        --password "{{ QT_PASSWORD }}" \
        --root "{{ QT_ROOT }}" \
        --platform minimal \
        --confirm-command \
        --accept-licenses \
        --accept-obligations \
        --accept-messages \
        install \
        qt.qt5.5152.qtpdf \
        qt.qt5.5152.qtpurchasing \
        qt.qt5.5152.qtvirtualkeyboard \
        qt.qt5.5152.qtquicktimeline \
        qt.qt5.5152.qtlottie \
        qt.qt5.5152.debug_info \
        qt.qt5.5152.qtscript \
        qt.qt5.5152.qtcharts \
        qt.qt5.5152.qtwebengine \
        qt.qt5.5152.qtwebglplugin \
        qt.qt5.5152.qtnetworkauth \
        qt.qt5.5152.qtwaylandcompositor \
        qt.qt5.5152.qtdatavis3d \
        qt.qt5.5152.logs \
        qt.qt5.5152 \
        qt.qt5.5152.src \
        qt.qt5.5152.gcc_64 \
        qt.qt5.5152.qtquick3d
    popd

    # rm -rf /build/Qt

    ## OPENRV
    mkdir -p /build/OpenRV

    pushd /build/OpenRV
    git clone \
        --recursive \
        https://github.com/AcademySoftwareFoundation/OpenRV.git \
        .
    # git clone --recursive --depth 1 https://github.com/AcademySoftwareFoundation/OpenRV.git
    # cd OpenRV
    which python3
    python3 --version
    # [ $(python3 --version) == "Python 3.9.x" ] || echo "wrong Python version" && exit 1
    python3 -m pip install --requirement requirements.txt

    export QT_HOME="{{ QT_ROOT }}/{{ QT_HOME_VERSION }}/gcc_64"

    export RV_INST="{{ RV_INST }}"

    source ./rvcmds.sh
    time rvsetup
    rvcfg \
        -DRV_FFMPEG_NON_FREE_DECODERS_TO_ENABLE=\"{{ FFMPEG_NON_FREE_DECODERS_TO_ENABLE }}\" \
        -DRV_FFMPEG_NON_FREE_ENCODERS_TO_ENABLE=\"{{ FFMPEG_NON_FREE_ENCODERS_TO_ENABLE }}\"
    time rvbuildt dependencies
    time rvbuildt main_executable
    rvinst
    popd

    # rm -rf /build/OpenRV

    # CLEANUP

    # build
    # $ apptainer exec --nv --bind /run/user/$UID OpenRV.sif du -hs /build
    # 15G     /build
    rm -rf /build

%labels
    Author "Jean First"
    Contributors "Jean First, Michael Mussato"
    Version "v0.0.2"

%help
    # Build
    # create .env file and define QT_EMAIL and QT_PASSWORD - the credentials from your Qt Account
    time apptainer build --build-arg-file ../.env --warn-unused-build-args OpenRV.sif OpenRV.def
    # Run
    apptainer exec --nv --bind /run/user/$UID,/Volumes,/run/media/$USER OpenRV.sif /opt/rv/bin/rv
