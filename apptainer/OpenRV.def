BootStrap: docker
From: rockylinux:9

%post
    export QT_HOME="{{ QT_ROOT }}/{{ QT_HOME_VERSION }}/gcc_64"

    dnf install -y git
    dnf install -y epel-release
    dnf config-manager --set-enabled crb devel
    dnf install -y \
        alsa-lib-devel \
        autoconf \
        automake \
        avahi-compat-libdns_sd-devel \
        bison \
        bzip2-devel \
        curl-devel \
        flex \
        gcc \
        gcc-c++ \
        libXcomposite \
        libXi-devel \
        libaio-devel \
        libffi-devel \
        nasm \
        ncurses-devel \
        nss \
        libtool \
        libxkbcommon \
        libXcomposite \
        libXdamage \
        libXrandr \
        libXtst \
        libXcursor\
         mesa-libOSMesa \
         mesa-libOSMesa-devel \
         meson \
         ninja-build \
         openssl-devel \
         patch \
         perl-FindBin \
         pulseaudio-libs \
         pulseaudio-libs-glib2 \
         ocl-icd \
         ocl-icd-devel \
         opencl-headers \
         python3 \
         python3-devel \
         qt5-qtbase-devel \
         readline-devel \
         sqlite-devel \
         tcl-devel \
         tcsh \
         tk-devel \
         yasm \
         zip \
         zlib-devel
    dnf config-manager --set-disabled devel
    dnf install -y \
        mesa-libGLU \
        mesa-libGLU-devel
    dnf clean packages
    dnf autoremove

    # Note: /usr/bin/python needs to exist for OpenRV to build correctly.
    ln -sf /usr/bin/python3.9 /usr/bin/python
    # python -m pip install --root-user-action=ignore --upgrade pip setuptools setuptools_scm wheel
    python -m pip install --upgrade pip setuptools setuptools_scm wheel

    # BUILD
    mkdir -p /build

    ## CMAKE
    mkdir -p /build/cmake

    pushd /build/cmake
    curl --location \
        --remote-name \
        https://github.com/Kitware/CMake/releases/download/v{{ CMAKE_VERSION }}/cmake-{{ CMAKE_VERSION }}.tar.gz
    tar -zxvf cmake-{{ CMAKE_VERSION }}.tar.gz
    cd cmake-{{ CMAKE_VERSION }}
    ./bootstrap
    make
    make install

    which cmake
    cmake --version
    popd

    # rm -rf /build/cmake

    ## QT
    mkdir -p /build/Qt

    pushd /build/Qt
    # QT Online Installer for Linux
    # https://doc.qt.io/qt-6/get-and-install-qt-cli.html#downloading-qt-online-installer-with-command-line-interface
    # https://doc.qt.io/archives/qt-5.15/get-and-install-qt-cli.html#downloading-qt-online-installer-with-command-line-interface

    # Running out of disk space?
    # Context:
    # [259281] Installation space required: "8.83 GB" Temporary space required: "2.07 GB" Local repository size: "0.00 bytes"
    # [259282] Tmp is on a different volume than the installation directory. Tmp volume mount point: "/tmp" Free space available: "7.58 GB" Install volume mount point: "/" Free space available: "226.90 GB"
    # [259282] Installation will use 8.58 GB of disk space.
    # If the limited size of /tmp is reached, this might be the result:
    # [...]
    # [3231884] installationErrorWithCancel : Installer Error : Error during installation process (qt.qt5.5152.debug_info.gcc_64):
    # Error while extracting archive "installer://qt.qt5.5152.debug_info.gcc_64/5.15.2-0-202011130601qtnetworkauth-Linux-RHEL_7_6-GCC-Linux-RHEL_7_6-X86_64-debug-symbols.7z": Cannot write entry "/opt/Qt/5.15.2/gcc_64/lib/libQt5NetworkAuth.so.5.15.2.debug" to disk: Write failed: No space left on device.
    # [...]
    #
    # Possible solution:
    # Change TMPDIR
    # https://gist.github.com/peteristhegreat/719db2af49af600e06722827f98c7a52?permalink_comment_id=4403036#gistcomment-4403036
    # https://www.baeldung.com/linux/change-tmp-directory-path
    # https://www.ibm.com/docs/en/idr/10.2.1?topic=windows-setting-tmpdir-environment-variable-linux-unix

    curl --location \
        --remote-name \
        https://d13lb3tujbc8s0.cloudfront.net/onlineinstallers/qt-unified-linux-x64-{{ QT_INSTALLER_VERSION }}-online.run
    chmod a+x qt-unified-linux-x64-{{ QT_INSTALLER_VERSION }}-online.run
    # export QT_QPA_PLATFORM=offscreen
    # export QT_DEBUG_PLUGINS=1
    # Not required:
    # - Logs
    # - Android
    # - iOS
    # - WebAssembly
    ./qt-unified-linux-x64-{{ QT_INSTALLER_VERSION }}-online.run \
        --verbose \
        --email {{ QT_EMAIL }} \
        --password {{ QT_PASSWORD }} \
        --root {{ QT_ROOT }} \
        --platform minimal \
        --confirm-command \
        --accept-licenses \
        --accept-obligations \
        --accept-messages \
        install \
        qt.qt5.5152.qtpdf \
        qt.qt5.5152.qtpurchasing \
        qt.qt5.5152.qtvirtualkeyboard \
        qt.qt5.5152.qtquicktimeline \
        qt.qt5.5152.qtlottie \
        qt.qt5.5152.debug_info \
        qt.qt5.5152.qtscript \
        qt.qt5.5152.qtcharts \
        qt.qt5.5152.qtwebengine \
        qt.qt5.5152.qtwebglplugin \
        qt.qt5.5152.qtnetworkauth \
        qt.qt5.5152.qtwaylandcompositor \
        qt.qt5.5152.qtdatavis3d \
        qt.qt5.5152.logs \
        qt.qt5.5152 \
        qt.qt5.5152.src \
        qt.qt5.5152.gcc_64 \
        qt.qt5.5152.qtquick3d
    popd

    ## OPENRV
    mkdir -p /build/OpenRV

    pushd /build/OpenRV
    git clone \
        --recursive \
        https://github.com/AcademySoftwareFoundation/OpenRV.git .
    # git clone --recursive --depth 1 https://github.com/AcademySoftwareFoundation/OpenRV.git
    # cd OpenRV
    python -m pip install --requirement requirements.txt
    source ./rvcmds.sh
    # rvcfg -DRV_FFMPEG_NON_FREE_DECODERS_TO_ENABLE="aac;hevc" -DRV_FFMPEG_NON_FREE_ENCODERS_TO_ENABLE="aac"
    rvsetup
    rvcfg -DRV_FFMPEG_NON_FREE_DECODERS_TO_ENABLE="aac;hevc;dnxhd" -DRV_FFMPEG_NON_FREE_ENCODERS_TO_ENABLE="aac;dnxhd"
    rvbuildt dependencies
    rvbuildt main_executable
    rvinst
    popd

    # CLEANUP

    # build
    rm -rf /build

%labels
    Author "Jean First"
    Contributors "Jean First, Michael Mussato"
    Version "v0.0.2"

%help
    # Build
    # create .env file and define QT_EMAIL and QT_PASSWORD - the credentials from your Qt Account
    apptainer build --build-arg-file ../.env --warn-unused-build-args OpenRV.sif OpenRV.def
    # Run
    apptainer exec --nv --bind /run/user/$UID,/Volumes,/run/media/$USER OpenRV.sif /opt/rv/bin/rv
